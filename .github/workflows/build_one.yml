name: Build one package

on:
  workflow_call:
    inputs:
      conanfile:
        required: true
        type: string
      package_name:
        required: true
        type: string
      package_version:
        required: true
        type: string
      upload_to_artifactory:
        required: true
        type: boolean
      build_dependencies_from_source:
        required: true
        type: boolean
      platform_include_patterns:
        required: false
        type: string
      platform_exclude_patterns:
        required: false
        type: string
    secrets:
      ARTIFACTORY:
        required: true
  workflow_dispatch:
    inputs:
      conanfile:
        description: Conanfile to build
        type: string
      package_name:
        description: The name of the package to build
        type: string
      package_version:
        description: The version of the package to build
        type: string
      upload_to_artifactory:
        description: Upload built packages to artifactory
        type: boolean
        default: false
      build_dependencies_from_source:
        description: Build all dependencies from source (conan install --build=* instead of --build=missing)
        type: boolean
        default: false
      platform_include_patterns:
        description: Include patterns for platforms
        type: string
      platform_exclude_patterns:
        description: Exclude patterns for platforms
        type: string

run-name: Build ${{ inputs.conanfile }} version ${{ inputs.package_version }}

jobs:
  generate-matrix:
    runs-on: ubuntu-24.04
    outputs:
      configs: ${{ steps.list-build-matrix.outputs.configs }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: install python dependencies
        run: python -m pip install --upgrade pip conan semver

      - name: conan config
        run: conan config install .github/config/ubuntu-24.04/conan

      - name: list build matrix
        id: list-build-matrix
        run: python scripts/list_build_matrix.py
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_INPUT: ${{ toJson(inputs) }}

  build:
    if: ${{ needs.generate-matrix.outputs.configs != '[]' && needs.generate-matrix.outputs.configs != '' }}
    name : ${{ matrix.config.host_profile }}
    needs:
      - generate-matrix
    runs-on: ${{ matrix.config.build_machine }}
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.generate-matrix.outputs.configs) }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: install python dependencies and setuptools (required to build GLib)
        run: python -m pip install --upgrade pip conan setuptools

      - name: install NDK
        if: startsWith(matrix.config.host_profile, 'android')
        run: yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install 'ndk;${{ matrix.config.ndk_version }}'

      - name: conan remote
        run: |
          conan remote remove "*"
          conan remote add odr https://artifactory.opendocument.app/artifactory/api/conan/conan
          conan remote add conancenter https://center2.conan.io
      - name: conan config
        run: conan config install '.github/config/${{ matrix.config.build_machine }}/conan'

      - name: Parse build from source option
        id: build_from_source
        shell: bash
        run: |
          if [ ${{ inputs.build_dependencies_from_source }} == true ]; then
            echo "argument=*" | tee $GITHUB_OUTPUT
          else
            echo "argument=missing" | tee $GITHUB_OUTPUT
          fi
      
      - name: Determin lockfile path
        id: lockfile_path
        shell: bash
        run: |
          lockfile="lockfiles/${{ inputs.package_name }}/${{ inputs.package_version }}/${{ matrix.config.host_profile }}/conan.lock"
          echo "path=${lockfile}" | tee $GITHUB_OUTPUT
          [ -f "${lockfile}" ]

      - name: Conan export all packages
        run: python scripts/conan_export_all_packages.py

      - name: conan install
        shell: bash
        run: |
          conan install '${{ inputs.conanfile }}' --version '${{ inputs.package_version }}' \
            --lockfile '${{ steps.lockfile_path.outputs.path }}' \
            --profile:host '${{ matrix.config.host_profile }}' \
            --profile:build default \
            --build '${{ steps.build_from_source.outputs.argument }}' \

      - name: conan create
        shell: bash
        run: |
          conan create '${{ inputs.conanfile }}' --version '${{ inputs.package_version }}' \
            --lockfile '${{ steps.lockfile_path.outputs.path }}' \
            --profile:host '${{ matrix.config.host_profile }}' \
            --profile:build default \

      - name: conan login
        if: ${{ inputs.upload_to_artifactory }}
        run: conan remote login odr admin --password '${{ secrets.ARTIFACTORY }}'

      - name: conan upload
        if: ${{ inputs.upload_to_artifactory }}
        run: conan upload "*" --check --confirm --remote odr

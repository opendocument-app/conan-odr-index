--- wvWare.c
+++ wvWare.c
@@ -32,8 +32,45 @@
 /* strdup isn't declared in <string.h> for `gcc -ansi'; declare it here */
 extern char *strdup (const char *);
 
-extern char *str_copy(char *d, size_t n, char *s);
-extern char *str_append(char *d, size_t n, char *s);
+#include <stdarg.h>
+
+const char * g_wvDataDir = NULL;
+FILE * g_htmlOutputFileHandle = NULL;
+
+int printfRedirect(const char *fmt, ...) {
+  int retVal;
+  va_list args;
+  va_start(args, fmt);
+  if (NULL != g_htmlOutputFileHandle) {
+    retVal = vfprintf(g_htmlOutputFileHandle, fmt, args);
+  } else {
+    retVal = vprintf(fmt, args);
+  }
+  va_end(args);
+  return retVal;
+}
+
+int documentId = 0;
+#define static_reinit( variable, defaultValue ) { \
+  static int staticVarValue = 0; \
+  if (staticVarValue != documentId) { \
+    variable = defaultValue; \
+    staticVarValue = documentId; \
+  } \
+}
+
+char *strdup_and_append_twice(const char *a, const char *b, const char *c) {
+  const size_t szA = strlen(a);
+  const size_t szB = strlen(b);
+  const size_t szC = strlen(c);
+
+  char *buf = malloc(szA + szB + szC + 1);
+  strcpy(buf, a);
+  strcpy(buf + szA, b);
+  strcpy(buf + szA + szB, c);
+  buf[szA + szB + szC] = '\0';
+  return buf;
+}
 
 /*
 Released under GPL, written by Caolan.McNamara@ul.ie.
@@ -290,220 +327,116 @@
 static void wv_query_eps (const char* format);
 static void wv_suppress (const char* format);
 
-char *charset = NULL;
+char *charset = "utf-8";
 
-int
-main (int argc, char **argv)
-{
-    FILE *input;
-    char *password = NULL;
-    char *dir = NULL;
-    int ret;
-    state_data myhandle;
-    expand_data expandhandle;
-    wvParseStruct ps;
-    int c, index = 0;
-    static struct option long_options[] = {
-	{"charset", 1, 0, 'c'},
-	{"config", 1, 0, 'x'},
-	{"password", 1, 0, 'p'},
-	{"dir", 1, 0, 'd'},
-	{"basename", 1, 0, 'b'},
-	{"auto-eps", 1, 0, 'a'},
-	{"suppress", 1, 0, 's'},
-	{"version", 0, 0, 'v'},
-	{"help", 0, 0, '?'},
-	{"xml", 0, 0, 'X'},
-	{"nographics", 0, 0, '1'},
-	{0, 0, 0, 0}
-    };
-
-    if (argc < 2)
-      {
-	  do_help ();
-	  exit (-1);
-      }
-
-    while (1)
-      {
-	  c = getopt_long (argc, argv, "?vc:x:p:d:b:a:s:X1", long_options, &index);
-	  if (c == -1)
-	      break;
-	  switch (c)
-	    {
-	    case '?':
-		do_help ();
-		return 0;
-	    case 'v':
-		do_version ();
-		return 0;
-	    case 'c':
-		if (optarg)
-		    charset = optarg;
-		else
-		    wvError (("No argument given to charset"));
-		break;
-	    case 'x':
-		if (optarg)
-		    config = optarg;
-		else
-		    wvError (("No config file given to config option"));
-		break;
-	    case 'p':
-		if (optarg)
-		    password = optarg;
-		else
-		    wvError (("No password given to password option"));
-		break;
-	    case 'd':
-		if (optarg)
-		    dir = optarg;
-		else
-		    wvError (("No directory given to dir option"));
-		break;
-	    case 'b':
-		if (optarg)
-		    wv_arg_basename = optarg;
-		else
-		    wvError (("No name given to basename option"));
-		break;
-	    case 'a':
-		wv_query_eps (optarg);
-		return 0;
-	    case 's':
-		wv_suppress (optarg);
-		break;
-
-	    case 'X':
-		config     = "wvXml.xml";
-		charset    = "utf-8";
-		xml_output = 1;
-		xml_slash  = " /";
-		break;
-		
-	    case '1':
-		no_graphics = 1;
-		break;
-		
-	    default:
-		do_help ();
-		return -1;
-	    }
-      }
+int wvHtml_convert(char *inputFile, char *outputDir, const char *password) {
+  int ret;
+  state_data myhandle;
+  expand_data expandhandle;
+  wvParseStruct ps;
 
-    if (optind >= argc)
-      {
-	  fprintf (stderr, "No file name given to open\n");
-	  return (-1);
-      }
+  documentId++;
 
-#if 0
-    input = fopen (argv[optind], "rb");
-    if (!input)
-      {
-	fprintf (stderr, "Failed to open %s\n", argv[optind]);
-	  return (-1);
-      }
-    fclose (input);
-#endif
+  config = "wvHtml.xml";
 
-    getcwd (wv_cwd,4096);
-    wv_cwd[4096] = 0;
+  getcwd (wv_cwd,4096);
+  wv_cwd[4096] = 0;
 
-    wvInit ();
-    ret = wvInitParser (&ps, argv[optind]);
-    ps.filename = argv[optind];
-    ps.dir = dir;
+  wvInit ();
+  ret = wvInitParser (&ps, inputFile);
+  ps.dir = outputDir;
 
-    if (ret & 0x8000)		/* Password protected? */
-      {
-	  if ((ret & 0x7fff) == WORD8)
-	    {
-		ret = 0;
-		if (password == NULL)
-		  {
-		      fprintf (stderr,
-			       "Password required, this is an encrypted document\n");
-		      return (-1);
-		  }
-		else
-		  {
-		      wvSetPassword (password, &ps);
-		      if (wvDecrypt97 (&ps))
-			{
-			    wvError (("Incorrect Password\n"));
-			    return (-1);
-			}
-		  }
-	    }
-	  else if (((ret & 0x7fff) == WORD7) || ((ret & 0x7fff) == WORD6))
-	    {
-		ret = 0;
-		if (password == NULL)
-		  {
-		      fprintf (stderr,
-			       "Password required, this is an encrypted document\n");
-		      return (-1);
-		  }
-		else
-		  {
-		      wvSetPassword (password, &ps);
-		      if (wvDecrypt95 (&ps))
-			{
-			    wvError (("Incorrect Password\n"));
-			    return (-1);
-			}
-		  }
-	    }
-      }
-
-    if (ret)
+  if (ret & 0x8000)		/* Password protected? */
+  {
+    if ((ret & 0x7fff) == WORD8)
+    {
+      ret = 0;
+      if (password == NULL || password[0] == '\0')
       {
-	  wvError (("startup error #%d\n", ret));
-	  wvOLEFree (&ps);
-	  return (-1);
+        fprintf (stderr,
+                 "Password required, this is an encrypted document\n");
+        return 100;
       }
-
-    wvSetElementHandler (&ps, myelehandler);
-    wvSetDocumentHandler (&ps, mydochandler);
-    wvSetCharHandler (&ps, myCharProc);
-    wvSetSpecialCharHandler (&ps, mySpecCharProc);
-
-    wvInitStateData (&myhandle);
-
-    if (wvOpenConfig (&myhandle,config) == 0)
+      else
       {
-	  wvError (("config file not found\n"));
-	  return (-1);
+        wvSetPassword (password, &ps);
+        if (wvDecrypt97 (&ps))
+        {
+          wvError (("Incorrect Password\n"));
+          return 101;
+        }
       }
-    else
+    }
+    else if (((ret & 0x7fff) == WORD7) || ((ret & 0x7fff) == WORD6))
+    {
+      ret = 0;
+      if (password == NULL || password[0] == '\0')
       {
-	  wvTrace (("x for FILE is %x\n", myhandle.fp));
-	  ret = wvParseConfig (&myhandle);
+        fprintf (stderr,
+                 "Password required, this is an encrypted document\n");
+        return 100;
       }
-
-    if (!ret)
+      else
       {
-	  expandhandle.sd = &myhandle;
-	  ps.userData = &expandhandle;
-	  ret = wvHtml (&ps);
+        wvSetPassword (password, &ps);
+        if (wvDecrypt95 (&ps))
+        {
+          wvError (("Incorrect Password\n"));
+          return 101;
+        }
       }
-    wvReleaseStateData (&myhandle);
+    }
+  }
 
-    if (ret == 2)
-	return (2);
-    else if (ret != 0)
-	ret = -1;
+  if (ret)
+  {
+    wvError (("startup error #%d\n", ret));
     wvOLEFree (&ps);
-    wvShutdown ();
+    return (-1);
+  }
+
+  wvSetElementHandler (&ps, myelehandler);
+  wvSetDocumentHandler (&ps, mydochandler);
+  wvSetCharHandler (&ps, myCharProc);
+  wvSetSpecialCharHandler (&ps, mySpecCharProc);
+
+  wvInitStateData (&myhandle);
+
+  if (wvOpenConfig (&myhandle,config) == 0)
+  {
+    wvError (("config file not found\n"));
+    return (-1);
+  }
+  else
+  {
+    wvTrace (("x for FILE is %x\n", myhandle.fp));
+    ret = wvParseConfig (&myhandle);
+  }
+
+  if (!ret)
+  {
+    expandhandle.sd = &myhandle;
+    ps.userData = &expandhandle;
+    ret = wvHtml (&ps);
+  }
+  wvReleaseStateData (&myhandle);
+
+  if (ret == 2)
+    return (2);
+  else if (ret != 0)
+    ret = -1;
+  wvOLEFree (&ps);
+  wvShutdown ();
 
-    return (ret);
+  return (ret);
 }
 
 int
 myelehandler (wvParseStruct * ps, wvTag tag, void *props, int dirty)
 {
     static PAP *ppap;
+    static_reinit(ppap, NULL)
+
     expand_data *data = (expand_data *) ps->userData;
     data->anSttbfAssoc = &ps->anSttbfAssoc;
     data->lfo = &ps->lfo;
@@ -602,6 +535,7 @@
 mydochandler (wvParseStruct * ps, wvTag tag)
 {
     static int i;
+    static_reinit(i, 0)
     expand_data *data = (expand_data *) ps->userData;
     data->anSttbfAssoc = &ps->anSttbfAssoc;
     data->lfo = &ps->lfo;
@@ -1290,6 +1224,7 @@
 mySpecCharProc (wvParseStruct * ps, U16 eachchar, CHP * achp)
 {
     static int message;
+    static_reinit(message, 0)
     PICF picf;
     FSPA *fspa;
     expand_data *data = (expand_data *) ps->userData;
@@ -1607,33 +1542,26 @@
 int
 wvOpenConfig (state_data *myhandle,char *config)
 {
-    static char buf[BUFSIZ] = "";
     FILE *tmp;
-    int i = 0;
     if (config == NULL)
-	config = "wvHtml.xml";
-    else
-	i = 1;
+	    config = "wvHtml.xml";
     tmp = fopen (config, "rb");
-
     if(tmp == NULL)
     {
-	str_copy  (buf, sizeof(buf), WVDATADIR);
-	str_append(buf, sizeof(buf), "/");
-	str_append(buf, sizeof(buf), config);
-	config = buf;
-	tmp = fopen(config, "rb");
+      static char * buf = NULL;
+      if (NULL != buf) {
+        free(buf);
+      }
+      const char *WV_DATA_DIR = getenv("WVDATADIR");
+      if (NULL == WV_DATA_DIR)
+        WV_DATA_DIR = g_wvDataDir;
+      if (NULL != WV_DATA_DIR)
+        buf = strdup_and_append_twice(WV_DATA_DIR, "/", config);
+      else
+        buf = strdup(config);
+	    config = buf;
+	    tmp = fopen(config, "rb");
     }
-
-    if (tmp == NULL)
-      {
-	  if (i)
-	      wvError (
-		       ("Attempt to open %s failed, using %s\n", config,
-			HTMLCONFIG));
-	  config = HTMLCONFIG;
-	  tmp = fopen (config, "rb");
-      }
     myhandle->path = config;
     myhandle->fp = tmp;
     return (tmp == NULL ? 0 : 1);
@@ -1642,7 +1570,9 @@
 char * figure_name (wvParseStruct * ps)
 {
   static int number;
+  static_reinit(number, 0)
   static char * b_name = 0;
+  static_reinit(b_name, NULL)
   char * f_name = 0;
   char buffer[10];
 
@@ -1703,7 +1633,9 @@
 char * name_to_url (char * name)
 {
   static char * url = 0;
+  static_reinit(url, NULL)
   static long max = 0;
+  static_reinit(max, 0)
   char * ptr = 0;
   long count = 0;
 
--- GNUmakefile.am
+++ GNUmakefile.am
@@ -18,8 +18,6 @@
 
 bin_SCRIPTS = wvCleanLatex wvHtml wvDocBook wvAbw wvMime wvPS wvDVI wvLatex wvPDF wvText wvWml
 
-bin_PROGRAMS = wvWare wvRTF wvConvert wvVersion wvSummary
-
 lib_LTLIBRARIES = libwv.la
 
 GETOPT = @LIBOBJS@
@@ -33,6 +31,7 @@
 libwv_la_LIBADD =  $(WVLIBS)
 libwv_la_LDFLAGS = -version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE) -release $(LT_RELEASE) -export-dynamic -no-undefined
 libwv_la_SOURCES = \
+	wvWare.c \
 	winmmap.c \
 	list.c \
 	stylesheet.c \
--- wv.h
+++ wv.h
@@ -10,6 +10,14 @@
 extern "C" {
 #endif
 
+extern FILE * g_htmlOutputFileHandle;
+int printfRedirect(const char* __fmt, ...);
+#define printf printfRedirect
+
+extern int no_graphics;
+extern const char * g_wvDataDir;
+int wvHtml_convert(char *inputFile, char *outputDir, const char *password);
+
 /* The structure below is used to refer to a wvStream.  Usually,
  * kind = GSF_STREAM,
  * but if we can't open a file using LibGSF, we fall back to the old file-based
